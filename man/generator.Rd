% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generator.R
\name{generator}
\alias{generator}
\title{Create a Python iterator from an R function}
\usage{
generator(fn)
}
\arguments{
\item{fn}{R function with no arguments.}
}
\value{
Python iterator which calls the R function for each iteration.
}
\description{
Create a Python iterator from an R function
}
\details{
Python generators are functions that implement the Python iterator
protocol. In Python, values are returned using the \code{yield} keyword. In R,
values are simply returned from the function.

The \code{yield} keyword in Python enables successive iterations to use the state
of previous iterations. In R, this can be done by returning a function that
accesses it's enclosing environment via the \code{<<-} operator. For example:\preformatted{sequence_generator <-function(start) {
  value <- start
  function() {
    value <<- value + 1
    value
  }
}

g <- generator(sequence_generator(10))
}
}
