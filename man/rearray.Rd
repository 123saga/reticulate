% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/array.R
\name{rearray}
\alias{rearray}
\title{Reshape an Array}
\usage{
rearray(x, dim, order = c("C", "F"))
}
\arguments{
\item{x}{Either an \R array or a NumPy array.}

\item{dim}{The new dimensions to be set on the array.}

\item{order}{The order in which elements of \code{x} should be read during
the rearrangement. \code{"C"} means elements should be read in row-major
order, with the last index changing fastest; \code{"F"} means elements should
be read in column-major order, with the first index changing fastest.}
}
\description{
Reshape (reindex) a multi-dimensional array, using reshaping semantics that
align with the behavior of NumPy's own \code{reshape()} function.
}
\details{
This function differs from e.g. \code{dim(x) <- dim} in a very important way: by
default, \code{rearray()} will fill the new dimensions in row-major
(\code{F}ortran-style) ordering, while \code{\link[=dim<-]{dim<-()}} will fill new dimensions in
column-major (\code{C}-style) ordering. This is done to be consistent with the
NumPy \code{np.reshape()} function, which defaults to this sort of ordering when
reshaping arrays. See the examples for why this difference may be important.
}
\examples{
# let's construct a 2x2 array from a vector of 4 elements
x <- 1:4

# rearrange will fill the array row-wise
rearray(x, c(2, 2))
#      [,1] [,2]
# [1,]    1    2
# [2,]    3    4
# setting the dimensions 'fills' the array col-wise
dim(x) <- c(2, 2)
x
#      [,1] [,2]
# [1,]    1    3
# [2,]    2    4
}
